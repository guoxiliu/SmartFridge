package devices
public
	with sensor;
	with base_types;
	with data_types;
	with common;
	with EMV2;
	
	-- camera device (contains the sensor and the handler)
	device camera_sensor extends sensor::generic_sensor
		features
			sensor_data_out: refined to out data port data_types::picture;
			bus_access: requires bus access common::system_bus;
			
		annex EMV2 {**
			use types error_library;
			
			error propagations
				sensor_data_out: out propagation {InvalidValue};
			flows
				ef0: error source sensor_data_out {InvalidValue};
			end propagations;
			
			properties
				emv2::hazards => 
				([
					failure => "InvalidValue";
					description => "Invalid data from camera sensor";
					comment => "Would impact the recognition of product if camera is not working properly";
				])
			applies to sensor_data_out.InvalidValue;
			
		**};
		
	end camera_sensor;
	
	device implementation camera_sensor.impl extends sensor::generic_sensor.impl
	end camera_sensor.impl;
	
	system camera_handler extends sensor::generic_sensor_handler
	end camera_handler;
	
	system implementation camera_handler.impl extends sensor::generic_sensor_handler.impl
	end camera_handler.impl;
	
	-- amine (from the decomposition of protein) sensor	
	device amine_sensor extends sensor::generic_sensor
		features
			sensor_data_out: refined to out data port base_types::Float_32;
			bus_access: requires bus access common::master_sensor.generic;
	end amine_sensor;

	device implementation amine_sensor.impl extends sensor::generic_sensor.impl
	end amine_sensor.impl;

	-- ethylene (ripening/rotting) sensor
	device ethylene_sensor extends sensor::generic_sensor
		features
			sensor_data_out: refined to out data port base_types::Float_32;
			bus_access: requires bus access common::master_sensor.generic;
	end ethylene_sensor;
	
	device implementation ethylene_sensor.impl extends sensor::generic_sensor.impl
	end ethylene_sensor.impl;

	-- hydrogen sulphide (from the decomposition of protein) sensor
	device H2S_sensor extends sensor::generic_sensor
		features
			sensor_data_out: refined to out data port base_types::Float_32;
			bus_access: requires bus access common::master_sensor.generic;
	end H2S_sensor;
	device implementation H2S_sensor.impl extends sensor::generic_sensor.impl
	end H2S_sensor.impl;
	
	-- carbon dioxide sensor
	device CO2_sensor extends sensor::generic_sensor
		features
			sensor_data_out: refined to out data port base_types::Float_32;
			bus_access: requires bus access common::master_sensor.generic;
	end CO2_sensor;
	
	device implementation CO2_sensor.impl extends sensor::generic_sensor.impl
	end CO2_sensor.impl;
	
	-- master sensor integrates four gas sensors defined above
	system master_sensor extends sensor::generic_sensor
		features
			sensor_data_out: refined to out data port data_types::content;
			bus_access: requires bus access common::system_bus.generic;
	end master_sensor;
	
	system implementation master_sensor.impl 
		subcomponents
			H2S_sensor: device H2S_sensor.impl;
			CO2_sensor: device CO2_sensor.impl;
			amine_sensor: device amine_sensor.impl;
			ethylene_sensor: device ethylene_sensor.impl;
			this_controller: process controller;
			this_bus: bus common::master_sensor.generic;
		connections
			H2S_conn: port H2S_sensor.sensor_data_out -> this_controller.H2S_in;
			CO2_conn: port CO2_sensor.sensor_data_out -> this_controller.CO2_in;
			amine_conn: port amine_sensor.sensor_data_out -> this_controller.amine_in;
			ethylene_conn: port ethylene_sensor.sensor_data_out -> this_controller.ethylene_in;
			controller_conn: port this_controller.content_out -> sensor_data_out;
			
			bus_amine: bus access this_bus <-> amine_sensor.bus_access;
			bus_ethylene: bus access this_bus <-> ethylene_sensor.bus_access;
			bus_H2S: bus access this_bus <-> H2S_sensor.bus_access;
			bus_CO2: bus access this_bus <-> CO2_sensor.bus_access;
			
		annex EMV2{**
			use types error_library;
			use behavior error_library::simple;
			
			component error behavior
			events
				ControllerFailure: error event;
			transitions
				Operational -[ControllerFailure]-> Failed;
			end component;
			
			properties
				EMV2::hazards =>
				([
					failure => "ControllerFailure";
					description => "The controller does not work properly";
					comment => "Impact the normal operation of the master sensor";
				])
				applies to ControllerFailure;
		**};
			
	end master_sensor.impl;
	
	-- process
	process controller
		features
			H2S_in: in data port base_types::Float_32;
			CO2_in: in data port base_types::Float_32;
			amine_in: in data port base_types::Float_32;
			ethylene_in: in data port base_types::Float_32;
			content_out: out data port data_types::content;
	end controller;
	
	process implementation controller.impl
		subcomponents
			thread_H2S: thread read_H2S.impl;
			thread_CO2: thread read_CO2.impl;
			thread_amine: thread read_amine.impl;
			thread_ethylene: thread read_ethylene.impl;
			thread_control: thread control_rule.impl;
		connections
			H2S_thread_conn: port H2S_in -> thread_H2S.H2S_in;
			CO2_thread_conn: port CO2_in -> thread_CO2.CO2_in;
			amine_thread_conn: port amine_in -> thread_amine.amine_in;
			ethylene_thread_conn: port ethylene_in -> thread_ethylene.ethylene_in;
			H2S_control_conn: port H2S_in -> thread_control.H2S_in;
			CO2_control_conn: port CO2_in -> thread_control.CO2_in;
			amine_control_conn: port amine_in -> thread_control.amine_in;
			ethylene_control_conn: port ethylene_in -> thread_control.ethylene_in;
			content_control_conn: port thread_control.content_out -> content_out;
			
		annex EMV2 {**
			use types error_library;
			use behavior error_library::simple;
			
			error propagations
				H2S_in: in propagation {NoValue, BadValue};
				CO2_in: in propagation {NoValue, BadValue};
				amine_in: in propagation {NoValue, BadValue};
				ethylene_in: in propagation {NoValue, BadValue};
				content_out: out propagation {NoValue};
			flows
				ef1: error sink H2S_in {NoValue, BadValue};
				ef2: error sink CO2_in {NoValue, BadValue};
				ef3: error sink amine_in {NoValue, BadValue};
				ef4: error sink ethylene_in {NoValue, BadValue};
				ef5: error source content_out {NoValue};
			end propagations;
			
			component error behavior 
			events
				SensorFailure: error event;
			transitions
				Operational -[SensorFailure]-> Failed;
			end component;
			
			properties
				EMV2::hazards => 
				([
					failure => "SensorFailure";
					description => "One or more sensors do not work properly";
					comment => "Impact the normal operation of the controller";
				])
				applies to SensorFailure;
		**};
	end controller.impl;
	
--	threads
	thread read_H2S
		features
			H2S_in: in data port base_types::Float_32;
	end read_H2S;
	
	thread implementation read_H2S.impl
	end read_H2S.impl;
	
	thread read_CO2
		features
			CO2_in: in data port base_types::Float_32;
	end read_CO2;
	
	thread implementation read_CO2.impl
	end read_CO2.impl;
	
	thread read_amine
		features
			amine_in: in data port base_types::Float_32;
	end read_amine;
	
	thread implementation read_amine.impl
	end read_amine.impl;
	
	thread read_ethylene
		features
			ethylene_in: in data port base_types::Float_32;
	end read_ethylene;
	
	thread implementation read_ethylene.impl
	end read_ethylene.impl;
	
	thread control_rule
		features
			H2S_in: in data port base_types::Float_32;
			CO2_in: in data port base_types::Float_32;
			amine_in: in data port base_types::Float_32;
			ethylene_in: in data port base_types::Float_32;
			content_out: out data port data_types::content;
	end control_rule;
	
	thread implementation control_rule.impl
	end control_rule.impl;
	
end devices;